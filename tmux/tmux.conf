
# Use a sensible prefix (C-s)
unbind C-b
set-option -g prefix C-s
bind-key C-s send-prefix
bind C-s send-prefix

# Devise some keybinds
# bind a last-window
# bind-key x kill-pane # skip "kill-pane 1? (y/n)" prompt


# -- general -------------------------------------------------------------------

set -s focus-events on                    # pass on focus events to applications
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout

set -g history-limit 500000               # boost history
set -g status-keys emacs                  # better than vi keys for command lines

set -s set-clipboard on                   # attempt to set the system clipboard

# edit configuration
bind e new-window -n "#{TMUX_CONF}" sh -c '${EDITOR:-vim} "$TMUX_CONF" && "$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF" \; display "$TMUX_CONF sourced"'

# reload configuration
bind r run '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "#{TMUX_CONF} sourced"


# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

set -g renumber-windows on    # don't end up with window numbers like: 0 1 4 5 6
setw -g automatic-rename on   # rename window to reflect current program

set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds

# activity
set -g monitor-activity on
set -g visual-activity off

setw -g window-active-style "bg=#232136"
setw -g window-style "bg=#2a273f"
setw -g pane-active-border-style "bg=#232136"
setw -g pane-border-style "bg=#2a273f"

# Handle 256 colors and clipboard
set -g default-terminal "xterm-256color"
set -g terminal-overrides ",*256col*:Tc:clipboard"
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
set-environment -g COLORTERM "truecolor"


# -- pane, window & session manipulation ---------------------------------------

bind C-c new-session                                 # create session
bind c new-window -c "#{pane_current_path}"          # new panes and windows use the pwd

bind - split-window -h -c "#{pane_current_path}"     # split current window horizontally using pwd
bind _ split-window -v -c "#{pane_current_path}"     # split current window vertically using pwd

# maximize current pane
bind + run "cut -c3- '#{TMUX_CONF}' | sh -s _maximize_pane '#{session_name}' '#D'"

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2


# -- navigation ----------------------------------------------------------------

# session navigation
bind BTab switch-client -l  # move to last session

# pane navigation
bind -r h select-pane -L        # move left
bind -r j select-pane -D        # move down
bind -r k select-pane -U        # move up
bind -r l select-pane -R        # move right
bind > swap-pane -D             # swap current pane with the next one
bind < swap-pane -U             # swap current pane with the previous one

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window

bind Tab last-window        # move to last active window

# -- copy mode -----------------------------------------------------------------

# enter copy mode
bind Enter copy-mode

# vi-like keys for copy mode
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-pipe "pbcopy" # copy to macOS clipboard
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi q send -X clear-selection
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line

# clean up previous binds
unbind-key C-[


# -- buffers -------------------------------------------------------------------

bind b list-buffers     # list paste buffers
bind p paste-buffer -p  # paste from the top paste buffer
bind P choose-buffer    # choose which buffer to paste from


# -- smart pane switching ------------------------------------------------------

# smart pane switching with awareness of vim splits
# makes ctrl-j and ctrl-k navigate fzf search results when fzf active in pane
# providing the same behavior as ctrl-j and ctrl-k when navigating ctrl-p results
# inside vim.

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

bind -n C-h run "($is_vim && tmux send-keys C-h) || \
                 tmux select-pane -L"

bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
                 ($is_fzf && tmux send-keys C-j) || \
                 tmux select-pane -D"

bind -n C-k run "($is_vim && tmux send-keys C-k) || \
                 ($is_fzf && tmux send-keys C-k)  || \
                 tmux select-pane -U"

bind -n C-l run "($is_vim && tmux send-keys C-l) || \
                 tmux select-pane -R"

bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"


# -- init tpm plugin -----------------------------------------------------------

set -g @plugin 'tmux-plugins/tpm'


# -- load theme and dark-notify ------------------------------------------------

source-file "$HOME/.config/tmux/rose-pine-moon.conf"
# https://github.com/erikw/tmux-dark-notify
#set -g @plugin 'erikw/tmux-dark-notify'
#set -g @dark-notify-theme-path-light "$HOME/.config/tmux/rose-pine-dawn.conf"
#set -g @dark-notify-theme-path-dark "$HOME/.config/tmux/rose-pine-moon.conf"
#if-shell "test -e ~/.local/state/tmux/tmux-dark-notify-theme.conf" \
#     "source-file ~/.local/state/tmux/tmux-dark-notify-theme.conf"


# -- load plugins --------------------------------------------------------------

# Load TMUX-RESURRECT
# https://github.com/tmux-plugins/tmux-resurrect
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-strategy-nvim 'session'

# Load 	T-SMART-SESSION-MANAGER
set -g @plugin 'joshmedeski/t-smart-tmux-session-manager'

set -g detach-on-destroy off  # don't exit from tmux when closing a session
set -g @t-fzf-prompt 'î¯ˆ  '
set -g @t-bind "t"


# -- load tpm plugin -----------------------------------------------------------

# https://github.com/tmux-plugins/tpm/tree/master
if "test ! -d ~/.config/tmux/plugins/tpm" \
   "run 'mkdir ~/.config/tmux/plugins -p && git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm && ~/.config/tmux/plugins/tpm/bin/install_plugins'"

run '~/.config/tmux/plugins/tpm/tpm'


# -- 8< ------------------------------------------------------------------------

%if #{==:#{TMUX_PROGRAM},}
  run 'TMUX_PROGRAM="$(LSOF=$(PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" command -v lsof); $LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g && s/(?:\s+\([^\s]+?\))?$//g) { print; exit } } exit 1; {" || readlink "/proc/#{pid}/exe" 2>/dev/null || printf tmux)"; "$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_PROGRAM "$TMUX_PROGRAM"'
%endif
%if #{==:#{TMUX_SOCKET},}
  run '"$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_SOCKET "#{socket_path}"'
%endif
%if #{==:#{TMUX_CONF},}
  run '"$TMUX_PROGRAM" set-environment -g TMUX_CONF $(for conf in "$HOME/.tmux.conf" "$XDG_CONFIG_HOME/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"; do [ -f "$conf" ] && printf "%s" "$conf" && break; done)'
%endif
